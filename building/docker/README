Running The BDSIM Dockerfile
----------------------------

From a Centos7 machine with docker installed and docker running:  ::

   source run-centos-bdsim.sh

This may take a while to download the ~5Gb file but once downloaded it will run quickly. This provides
a complete environment with BDSIM, Geant4, ROOT, CLHEP, iPython, and the BDSIM Python utilities (pybdism,
pymadx, pymad8, pytransport).


Docker Files For Testing
------------------------

Command to build a given image: ::

  docker build -t jairhul/<IMAGENAME> -f <DOCKERFILE> <CONTEXTPATH>

e.g.: ::

  docker build -t jairhul/centos7-geant4v10.5.1-environment -f Dockerfile-centos7-bdsim-geant4v10.5.1-environment  .


- These contain a version of geant4
- The docker file points to the branch of a given version and updates it.
- The patch numbers refer to the latest patch known on that branch
- If a patch (e.g. v11.0.3 -> v11.0.4) number changes then advance the numbers of the dockerfile name and rebuild image
- If a minor or major version number (e.g v11.0.3 -> v11.1.0) copy dockerfile and rename  and rebuild image


For Testing
***********

* Dockerfile-centos7-bdsim-base-environment
* Dockerfile-centos7-bdsim-base-environment-dt9  : dev-tools9 for C++17 compatible compiler
* Dockerfile-centos7-bdsim-base-environment-dt9-no-root  : dev-tool9 but no package manager root installation
* Dockerfile-centos7-bdsim-geant4v10.1.3-environment
* Dockerfile-centos7-bdsim-geant4v10.2.3-environment
* Dockerfile-centos7-bdsim-geant4v10.3.3-environment
* Dockerfile-centos7-bdsim-geant4v10.4.3-environment
* Dockerfile-centos7-bdsim-geant4v10.5.1-environment
* Dockerfile-centos7-bdsim-geant4v10.6.3-environment
* Dockerfile-centos7-bdsim-geant4v10.7.4-environment
* Dockerfile-centos7-bdsim-geant4v11.0.4-environment
* Dockerfile-centos7-bdsim-geant4v11.1.1-environment
* Dockerfile-centos7-bdsim-geant4v10.7.3.2-jai-environment  : patched Geant4.10.7.2 to turn back on proton diffraction

For General Deployment
**********************

* Dockerfile-centos7-bdsim-environment


Architecture
------------

If building on a different architecture from the destination one (e.g. on Mac M1 building x86_64) an extra flag
must be used. In the build-testing-environments.sh you can comment out the appropriate SUFFIX variable to give
the following flag: ::

  --platform linux/amd64

Note, the base image will have to be pushed first. In the derived (testing) images, the base image is called.
Docker will not find it locally due to the platform mismatch. Therefore, it's best to tag and push to dockerhub
first. Otherwise you would have to edit all of the dockerfiles to include the above flag in the FROM command. ::

  FROM --platform linux/amd64 IMAGE_NAME

Otherwise, despite the high level use of the same flag it appears to look for the local architecture.

Scripts
-------

These are for developers to build and tag all the environments for testing and deployment.

* build-testing-environments-base.sh
* tag-upload-testing-base-environments.sh
* build-testing-environments.sh
* tag-upload-testing-environments.sh
* build-centos7-bdsim.sh


* run-centos-bdsim.sh

