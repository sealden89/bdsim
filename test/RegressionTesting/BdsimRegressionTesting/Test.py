import numpy as _np
import string as _string
import glob as _glob
import collections

import Globals
import PhaseSpace
import Results


GlobalData = Globals.Globals()

# result utility functions for checking output log files.
# Needed by Run function, so instantiate here.
ResultUtils = Results.ResultsUtilities()


class TestData(dict):
    """ A class that holds the data for each individual test. This object will be
        passed into the function used in multithreaded testing.
        """
    def __init__(self, testFile='',
                 componentType='',
                 originalFile='',
                 generateOriginals=False,
                 selfCompare=False):
        dict.__init__(self)
        # add test file name, extract test params from filename and add to dict
        if testFile != '':
            self['testFile'] = testFile
            self['testParams'] = collections.OrderedDict()
            splitFile = testFile.split('/')[-1]
            splitFile = splitFile.replace('.gmad', '')
            splitFile = splitFile.replace(componentType + "__", '')
            params = splitFile.split('__')
            self['particle'] = params[0]
            params.remove(params[0])
            for i in params:
                prop = i.split('_')[0]
                value = i.split('_')[1]
                self['testParams'][prop] = value

        GlobalData._CheckComponent(componentType)
        self['componentType'] = componentType
        self['originalFile'] = originalFile  # file to which this test will be compared.

        # strip extension to leave test name, will be used as output name
        if testFile[-5:] == '.gmad':
            outputfile = testFile[:-5]
        else:
            outputfile = testFile
        outputfile = outputfile.split('/')[-1]
        self['outputFile'] = outputfile  # output file base name

        bdsimLogFile = outputfile + "_bdsim.log"
        comparatorLogFile = outputfile + "_comp.log"

        self['bdsimLogFile'] = bdsimLogFile
        self['compLogFile'] = comparatorLogFile

        self['ROOTFile'] = outputfile + '.root'
        self['generateOriginals'] = generateOriginals
        self['selfCompare'] = selfCompare

        self['bdsimTime'] = 0  # bdsim run time
        self['compTime'] = 0  # comparator run time

        self['code'] = None  # comparator return code
        self['generalStatus'] = None  # General status, can contain multiple return codes.
        self['comparatorResults'] = None


class Test(dict):
    """ A class that represents series of tests for a single component type,
        single particle type, and single particle energy.

        Parameters:

        component :  string
            The component type that these tests will represent.

        energy :  float or string
            The energy of the particle that will be used in these tests.

        particle :  string
            The particle type that will be used in these tests

        phaseSpace :  PhaseSpace.PhaseSpace, optional
            An instance of the PhaseSpace.PhaseSpace initial particle coordinates
            used in these tests.

        useDefaults :  bool, optional
            Use the default parameters in Globals.Globals for this element type.
            if useDefaults=True, specifying parameter values after a Test instance has
            been initialised will override the values from Globals.Globals. Default = False.

        testRobustness :  bool, optional
            Test the robustness of these tests. This will place a collimator in front of the
            element being tested for the purpose of generating a particle shower. Default = False.

        eFieldMap :  string, optional
            The file name and path to a Efieldmap that will be attached to this element.
            Currently redundant.

        bFieldMap :  string, optional
            The file name and path to a Bfieldmap that will be attached to this element.
            Currently redundant.

        comparisonFile :  string, optional
            The file name and path to a root file to which the file generated by this test will be
            compared. This can only be specified if this Test instance represents a single test, that
            is that there is only one value specified per component parameter.
     """
    def __init__(self, component, energy, particle, phaseSpace=None,
                 useDefaults=False, testRobustNess=False, eFieldMap='',
                 bFieldMap='', comparisonFile='', **kwargs):
        dict.__init__(self)
        self._numFiles = 0
        self._testFiles = []
        self._useDefaults = useDefaults
        self._testRobustness = testRobustNess
        self.PhaseSpace = None
        self._beamFilename = 'trackingTestBeam.madx'  # default file name
        self.Particle = None
        self.Energy = 0
        
        # Initialise parameters for the component as empty lists (or defaults) and dynamically
        # create setter functions for those component parameters.
        if isinstance(component, _np.str) and (component in GlobalData.components):
            self.Component = component
            for param in GlobalData.hasParams[component]:
                if not useDefaults:
                    self[param] = []
                else:
                    self.__Update(param, GlobalData.paramValues[param])
                funcName = "Set" + _string.capitalize(param)
                setattr(self, funcName, self.__createSetterFunction(name=param))
            
            # set the parameter values to the kwarg values if defaults are not specified
            if not useDefaults:
                for key, value in kwargs.iteritems():
                    if key in GlobalData.hasParams[component]:
                        self.__Update(key, value)
        else:
            raise ValueError("Unknown component type.")

        self.SetComparisonFilename(fileName=comparisonFile)
        self.SetEnergy(energy)
        self.SetBeamPhaseSpace(phaseSpace)
        self.SetParticleType(particle)

    def __repr__(self):
        s = 'BdsimRegressionTesting.Test instance.\r\n'
        s += 'This is a test for a/an ' + self.Component + ' with ' + self.Particle
        s += ' at an energy of ' + _np.str(self.Energy) + ' GeV.\r\n'
        s += 'The component will be test all combinations of the following parameters:\r\n'
        for param in self.keys():
            s += '  '+param+' : ' + self[param].__repr__()+'\r\n'
        return s

    def __createSetterFunction(self, name=''):
        """ Function to return function template for updating component parameters.
            """
        def function_template(value):
            self.__Update(name, value)
        return function_template

    def __Update(self, parameter, values):
        """ Function to check the data type is allowable and set dict[parameter] to be those values.
            This allows the input to be multiple data types.
            
            Also, the number of parameter test combinations is recalculated upon the dict being updated.
            """
        # function to test if entry is numeric. note: is_numlike doesn't work on strings e.g. '3',
        # which we can accept as input, hence this function.
        def _isNumeric(number):
            try:
                floatval = _np.float(number)
            except ValueError:
                raise ValueError("Cannot set "+parameter+" to '"+val+"'.")
            return floatval

        variableValues = []
        # process multiple value types
        if type(values) in GlobalData.multiEntryTypes:
            if len(values) > 0:
                for val in values:
                    # if each value is another multiple entry type, set it as the parameter value
                    if type(val) in GlobalData.multiEntryTypes:
                        variableValues.append(val)
                    else:
                        # try converting all other dtypes to float
                        val = _isNumeric(val)
                        variableValues.append(val)
                self[parameter] = variableValues
            else:
                pass
        else:
            val = _isNumeric(values)
            variableValues.append(val)
            self[parameter] = variableValues
        self._UpdateTestCombinations()

    def _UpdateTestCombinations(self):
        # update number of parameter combinations
        numcomponentVariations = 1
        for key, values in self.iteritems():
            if key == 'knl' or key == 'ksl':
                numcomponentVariations *= (len(GlobalData.k1l)*len(values))
            elif len(values) != 0:
                numcomponentVariations *= len(values)
        if (self.Component == 'rbend' or self.Component == 'sbend') and self._useDefaults:
            numcomponentVariations /= len(GlobalData.paramValues['field'])
            numcomponentVariations *= 2  # angle or field
        self._numFiles = numcomponentVariations

    def SetComparisonFilename(self, fileName=''):
        """ Function to set the filename to which the generated BDSIM output will be compared.
            This filename can only be set if the pybdsim.Test object represent a solitary test.
            """
        if (self._numFiles > 1) and (fileName != ''):
            s = "This pybdsim.Test object is set to generate " + _np.str(self._numFiles) + " output files.\r\n"
            s += "A comparison test file can only be specified if this object represents a solitary test.\r\n"
            print(s)
        elif isinstance(fileName, _np.str) and (fileName != ''):
            # only set filename if the file exists
            startOfFileName = fileName.rfind('/')
            if startOfFileName == -1:
                files = _glob.glob('*')
                fName = startOfFileName
            else:
                files = _glob.glob(fileName[:(startOfFileName + 1)] + '*')
                fName = fileName[(startOfFileName + 1):]
            if fName in files:
                self._testFiles = fileName

    def SetEnergy(self, energy):
        """ Set test beam energy.
            """
        try:
            setattr(self, "Energy", _np.float(energy))
        except TypeError:
            raise ValueError("Unknown data type.")

    def SetParticleType(self, particle=''):
        """ Set test beam particle.
            """
        if particle in GlobalData.particles:
            setattr(self, "Particle", particle)
        else:
            raise ValueError("Unknown particle type")

    def SetBeamPhaseSpace(self, phaseSpace=None, x=0, px=0, y=0, py=0, t=0, pt=0):
        """ Set beam phase space. optional phaseSpace arg must be
            a PhaseSpace instance. Entry of particle co-ordinates instead
            internally creates a PhaseSpace instance anyway."""
        if phaseSpace is not None:
            if isinstance(phaseSpace, PhaseSpace.PhaseSpace):
                self.PhaseSpace = phaseSpace
            else:
                raise TypeError("phaseSpace can only be a PhaseSpace.PhaseSpace instance.")
        else:
            self.PhaseSpace = PhaseSpace.PhaseSpace(x, px, y, py, t, pt)

    def SetInrays(self, inraysFile=''):
        """ Set the filename which contains the ptc inrays file.
            """
        if isinstance(inraysFile, _np.str):
            if inraysFile != '':
                self._beamFilename = inraysFile
            else:
                raise ValueError("inraysFile cannot be an empty string ")
        else:
            raise TypeError("inraysFile must be a string")

    def AddParameter(self, parameter, values=[]):
        """ Function to add a parameter that is not a default parameter for the test's
            component type. An example would be defining a K1 value for a dipole."""
        if parameter in self.keys():
            raise ValueError("Parameter is already listed as a test parameter.")
        
        elif isinstance(parameter, _np.str):
            #check that the parameter can be parsed.
            if parameter in GlobalData.parameters:
                self[parameter] = []
                funcName = "Set" + _string.capitalize(parameter)
                setattr(self, funcName, self.__createSetterFunction(name=parameter))
                self.__Update(parameter, values)
            else:
                raise ValueError("Unknown parameter type: " + parameter + ".")
        else:
            raise TypeError("Unknown data type for " + parameter)

    def WriteToInrays(self, filename):
        """ Write the inrays file to disk. The filename should include the
            filepath relative to the TestSuite directory."""
        self.SetInrays(filename)
        self.PhaseSpace._WriteToInrays(filename)
